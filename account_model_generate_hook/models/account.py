# -*- coding: utf-8 -*-

import time
from datetime import datetime
from openerp import models, fields, api, _
from openerp.exceptions import except_orm


class AccountModel(models.Model):
    _inherit = "account.model"

    # THERE IS NO HOOK AT THE MOMENT.
    # May be we don't really need it yet, not so sure.

    @api.multi
    def generate(self, data=None):
        if data is None:
            data = {}
        move_ids = []
        entry = {}
        account_move_obj = self.env['account.move']
        account_move_line_obj = self.env['account.move.line']
        pt_obj = self.env['account.payment.term']
        period_obj = self.env['account.period']

        context = self._context.copy()
        if data.get('date', False):
            context.update({'date': data['date']})

        move_date = context.get('date', time.strftime('%Y-%m-%d'))
        move_date = datetime.strptime(move_date, "%Y-%m-%d")
        for model in self.with_context(context):
            ctx = context.copy()
            ctx.update({'company_id': model.company_id.id})
            periods = period_obj.find(dt=context.get('date', False),
                                      context=ctx)
            period = periods and periods[0] or False
            ctx.update({'journal_id': model.journal_id.id,
                        'period_id': period.id})
            try:
                entry['name'] = \
                    model.name % {'year': move_date.strftime('%Y'),
                                  'month': move_date.strftime('%m'),
                                  'date': move_date.strftime('%Y-%m')}
            except:
                raise except_orm(
                    _('Wrong Model!'),
                    _('You have a wrong expression "%(...)s" in your model!'))
            move = account_move_obj.create({
                'ref': entry['name'],
                'period_id': period.id,
                'journal_id': model.journal_id.id,
                'date': context.get('date', fields.Date.context_today(self))
            })
            move_ids.append(move.id)
            for line in model.lines_id:
                analytic_account_id = False
                if line.analytic_account_id:
                    if not model.journal_id.analytic_journal_id:
                        raise except_orm(
                            _('No Analytic Journal!'),
                            _("You have to define an analytic journal on "
                              "the '%s' journal!") % (model.journal_id.name,))
                    analytic_account_id = line.analytic_account_id.id
                val = {
                    'move_id': move.id,
                    'journal_id': model.journal_id.id,
                    'period_id': period.id,
                    'analytic_account_id': analytic_account_id
                }

                date_maturity = context.get('date', time.strftime('%Y-%m-%d'))
                if line.date_maturity == 'partner':
                    if not line.partner_id:
                        raise except_orm(
                            _('Error!'),
                            _("Maturity date of entry line generated by model "
                              "line '%s' of model '%s' is based on partner "
                              "payment term!\nPlease define partner on it!") %
                             (line.name, model.name))

                    payment_term_id = False
                    ttype = model.journal_id.type
                    if ttype in ('purchase', 'purchase_refund') and \
                            line.partner_id.property_supplier_payment_term:
                        payment_term_id = \
                            line.partner_id.property_supplier_payment_term.id
                    elif line.partner_id.property_payment_term:
                        payment_term_id = \
                            line.partner_id.property_payment_term.id
                    if payment_term_id:
                        pterm_list = pt_obj.compute(payment_term_id, value=1,
                                                    date_ref=date_maturity)
                        if pterm_list:
                            pterm_list = [l[0] for l in pterm_list]
                            pterm_list.sort()
                            date_maturity = pterm_list[-1]

                val.update({
                    'name': line.name,
                    'quantity': line.quantity,
                    'debit': line.debit,
                    'credit': line.credit,
                    'account_id': line.account_id.id,
                    'move_id': move.id,
                    'partner_id': line.partner_id.id,
                    'date': context.get('date',
                                        fields.Date.context_today(self)),
                    'date_maturity': date_maturity
                })
                account_move_line_obj.with_context(ctx).create(val)

        return move_ids
